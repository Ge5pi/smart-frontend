import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import api from '../api';

interface SmartFinding {
  question: string;
  summary: string;
  data_preview: any[];
  chart_data: any;
  analyzed_tables: string[];
  method: string;
  analysis_type: string;

  // SmartGPT –¥–∞–Ω–Ω—ã–µ
  business_insights: string;
  action_items: string[];
  risk_assessment: string;
  opportunities: string[];
  gpt_confidence: string;
  business_context: Record<string, any>;

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  statistical_insights: any[];
  correlations: any[];
  quality_metrics: any[];
  predictive_patterns: any[];

  timestamp: string;
  success: boolean;
  has_smart_insights: boolean;
}

interface SmartReport {
  executive_summary: string;
  detailed_findings: SmartFinding[];
  method: string;
  tables_info: Record<string, any>;
  relations_info: any[];

  smart_analysis_stats: {
    questions_processed: number;
    successful_analyses: number;
    failed_analyses: number;
    smart_gpt_insights_count: number;
    tables_analyzed: number;
    relations_found: number;
    total_memory_mb: number;
    success_rate_percent: number;
    smart_gpt_coverage_percent: number;
  };

  memory_usage: Record<string, any>;
  smart_recommendations: string[];
  report_metadata: {
    created_at: string;
    report_version: string;
    smart_gpt_enabled: boolean;
    analysis_engine: string;
  };
}

const ReportPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();

  const [report, setReport] = useState<SmartReport | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedTab, setSelectedTab] = useState<'overview' | 'insights' | 'actions' | 'technical'>('overview');

  useEffect(() => {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!id) {
      setLoading(false);
      setError("ID –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL.");
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
    const intervalId = setInterval(async () => {
      try {
        console.log(`[${new Date().toLocaleTimeString()}] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞...`);
        const response = await api.get(`/analytics/reports/${id}`);
        const currentReport = response.data;

        // –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ (COMPLETED) –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (FAILED)
        if (currentReport.status === 'COMPLETED' || currentReport.status === 'FAILED') {
          console.log("–ü–æ–ª—É—á–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:", currentReport.status);
          clearInterval(intervalId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å
          setReport(currentReport);
          setLoading(false); // –í—ã–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫

          if (currentReport.status === 'FAILED') {
            setError(currentReport.results?.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞');
          }
        }
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤—Å–µ –µ—â–µ PENDING –∏–ª–∏ PROCESSING, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∏ –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      } catch (err: any) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ –æ—Ç—á–µ—Ç–∞:", err);
        clearInterval(intervalId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        setError(err.response?.data?.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç');
        setLoading(false);
      }
    }, 3000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã

    // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏: –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ö–æ–¥–∏—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    return () => {
      console.log("–û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞...");
      clearInterval(intervalId);
    };

  }, [id]);

  const getConfidenceIcon = (confidence: string) => {
    switch (confidence) {
      case 'high': return 'üéØ';
      case 'medium': return '‚ö°';
      case 'low': return '‚ö†Ô∏è';
      default: return 'üìä';
    }
  };

  const getAnalysisTypeIcon = (type: string) => {
    const icons: Record<string, string> = {
      'overview': 'üè†',
      'business_insights': 'üíº',
      'data_quality': 'üîç',
      'statistical_insights': 'üìà',
      'predictive_analysis': 'üîÆ',
      'correlation': 'üîó',
      'anomalies': 'üö®',
      'comparison': '‚öñÔ∏è',
      'relationship_analysis': 'üåê'
    };
    return icons[type] || 'üìä';
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-6xl mx-auto">
          <div className="animate-pulse">
            <div className="h-8 bg-gray-200 rounded w-1/3 mb-6"></div>
            <div className="bg-white p-6 rounded-lg shadow-sm">
              <div className="h-4 bg-gray-200 rounded w-full mb-4"></div>
              <div className="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
              <div className="h-64 bg-gray-200 rounded"></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-6xl mx-auto">
          <div className="bg-red-50 border border-red-200 rounded-lg p-6">
            <h2 className="text-red-800 text-xl font-semibold mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞</h2>
            <p className="text-red-600 mb-4">{error}</p>
            <button
              onClick={() => navigate('/connections')}
              className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (!report) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-6xl mx-auto">
          <div className="text-center py-12">
            <p className="text-gray-500">–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
          </div>
        </div>
      </div>
    );
  }

  const smartFindings = report.results?.detailed_findings?.filter(f => f.has_smart_insights) || [];
  const allActionItems = smartFindings.flatMap(f => f.smartgpt_insights?.action_items || []);
  const allOpportunities = smartFindings.flatMap(f => f.opportunities || []);

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">SmartGPT –ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç</h1>
            <p className="text-gray-600 mt-1">
              {report.results?.report_metadata?.analysis_engine || 'SmartGPTAnalyzer'} ‚Ä¢
              {new Date(report.results?.report_metadata?.created_at).toLocaleDateString('ru-RU')}
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium">
              ü§ñ SmartGPT
            </span>
            <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
              v{report.result?.report_metadata?.report_version}
            </span>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-white p-4 rounded-lg shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">SmartGPT –ò–Ω—Å–∞–π—Ç—ã</p>
                <p className="text-2xl font-bold text-blue-600">
                  {report.result?.smart_analysis_stats?.smart_gpt_insights_count}
                </p>
              </div>
              <div className="text-2xl">ü§ñ</div>
            </div>
            <p className="text-xs text-gray-500 mt-1">
              –ü–æ–∫—Ä—ã—Ç–∏–µ: {report.results?.smart_analysis_stats?.smart_gpt_coverage_percent}%
            </p>
          </div>

          <div className="bg-white p-4 rounded-lg shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">–£—Å–ø–µ—à–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã</p>
                <p className="text-2xl font-bold text-green-600">
                  {report.results?.smart_analysis_stats?.successful_analyses}
                </p>
              </div>
              <div className="text-2xl">‚úÖ</div>
            </div>
            <p className="text-xs text-gray-500 mt-1">
              –ò–∑ {report.results?.smart_analysis_stats?.questions_processed} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            </p>
          </div>

          <div className="bg-white p-4 rounded-lg shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">–¢–∞–±–ª–∏—Ü –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ</p>
                <p className="text-2xl font-bold text-purple-600">
                  {report.results?.smart_analysis_stats?.tables_analyzed}
                </p>
              </div>
              <div className="text-2xl">üóÇÔ∏è</div>
            </div>
            <p className="text-xs text-gray-500 mt-1">
              {report.results?.smart_analysis_stats?.total_memory_mb.toFixed(1)} MB –¥–∞–Ω–Ω—ã—Ö
            </p>
          </div>

          <div className="bg-white p-4 rounded-lg shadow-sm">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">–°–≤—è–∑–µ–π –Ω–∞–π–¥–µ–Ω–æ</p>
                <p className="text-2xl font-bold text-orange-600">
                  {report.results?.smart_analysis_stats?.relations_found}
                </p>
              </div>
              <div className="text-2xl">üîó</div>
            </div>
            <p className="text-xs text-gray-500 mt-1">–ú–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏</p>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="bg-white rounded-lg shadow-sm mb-6">
          <div className="border-b border-gray-200">
            <nav className="flex space-x-8 px-6">
              {[
                { id: 'overview', label: '–û–±–∑–æ—Ä', icon: 'üìã' },
                { id: 'insights', label: '–ë–∏–∑–Ω–µ—Å-–∏–Ω—Å–∞–π—Ç—ã', icon: 'üí°' },
                { id: 'actions', label: '–î–µ–π—Å—Ç–≤–∏—è', icon: 'üéØ' },
                { id: 'technical', label: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏', icon: '‚öôÔ∏è' }
              ].map(tab => (
                <button
                  key={tab.id}
                  onClick={() => setSelectedTab(tab.id as any)}
                  className={`flex items-center space-x-2 py-4 border-b-2 font-medium text-sm ${
                    selectedTab === tab.id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <span>{tab.icon}</span>
                  <span>{tab.label}</span>
                </button>
              ))}
            </nav>
          </div>
        </div>

        {/* Tab Content */}
        <div className="space-y-6">
          {selectedTab === 'overview' && (
            <>
              {/* Executive Summary */}
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                  <span className="mr-2">üìä</span>
                  Executive Summary
                </h2>
                <div className="prose max-w-none">
                  <div className="whitespace-pre-wrap text-gray-700 leading-relaxed">
                    {report.results?.executive_summary}
                  </div>
                </div>
              </div>

              {/* Smart Recommendations */}
              {report.results?.smart_recommendations && report.results?.smart_recommendations.length > 0 && (
                <div className="bg-white rounded-lg shadow-sm p-6">
                  <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="mr-2">üí°</span>
                    –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                  </h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {report.results?.smart_recommendations.map((recommendation, index) => (
                      <div key={index} className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <p className="text-blue-800 text-sm">{recommendation}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </>
          )}

          {selectedTab === 'insights' && (
            <div className="space-y-6">
              {smartFindings.map((finding, index) => (
                <div key={index} className="bg-white rounded-lg shadow-sm">
                  <div className="border-b border-gray-200 p-6">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <h3 className="text-lg font-semibold text-gray-900 flex items-center mb-2">
                          <span className="mr-2">{getAnalysisTypeIcon(finding.analysis_type)}</span>
                          {finding.question}
                        </h3>
                        <div className="flex items-center space-x-4 text-sm text-gray-500">
                          <span className="flex items-center">
                            {getConfidenceIcon(finding.gpt_confidence)}
                            <span className="ml-1 capitalize">{finding.gpt_confidence} confidence</span>
                          </span>
                          <span>–¢–∞–±–ª–∏—Ü—ã: {finding.analyzed_tables.join(', ')}</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="p-6 space-y-6">
                    {/* Business Insights */}
                    {finding.business_insights && (
                      <div>
                        <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                          <span className="mr-2">üéØ</span>
                          –ë–∏–∑–Ω–µ—Å-–∏–Ω—Å–∞–π—Ç—ã
                        </h4>
                        <div className="bg-green-50 border-l-4 border-green-400 p-4">
                          <div className="whitespace-pre-wrap text-green-800 text-sm leading-relaxed">
                            {finding.business_insights}
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Action Items */}
                    {finding.action_items && finding.action_items.length > 0 && (
                      <div>
                        <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                          <span className="mr-2">‚úÖ</span>
                          –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                        </h4>
                        <ul className="space-y-2">
                          {finding.action_items.map((action, actionIndex) => (
                            <li key={actionIndex} className="flex items-start">
                              <span className="text-blue-500 mr-2 mt-1">‚ñ∂</span>
                              <span className="text-gray-700 text-sm">{action}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {/* Risk Assessment */}
                    {finding.risk_assessment && (
                      <div>
                        <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                          <span className="mr-2">‚ö†Ô∏è</span>
                          –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
                        </h4>
                        <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4">
                          <div className="whitespace-pre-wrap text-yellow-800 text-sm leading-relaxed">
                            {finding.risk_assessment}
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Opportunities */}
                    {finding.opportunities && finding.opportunities.length > 0 && (
                      <div>
                        <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                          <span className="mr-2">üöÄ</span>
                          –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                        </h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                          {finding.opportunities.map((opportunity, oppIndex) => (
                            <div key={oppIndex} className="bg-purple-50 border border-purple-200 rounded p-3">
                              <p className="text-purple-800 text-sm">{opportunity}</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Data Preview */}
                    {finding.data_preview && finding.data_preview.length > 0 && (
                      <div>
                        <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                          <span className="mr-2">üìã</span>
                          –î–∞–Ω–Ω—ã–µ
                        </h4>
                        <div className="bg-gray-50 rounded-lg overflow-hidden">
                          <div className="overflow-x-auto">
                            <table className="min-w-full divide-y divide-gray-200">
                              <thead className="bg-gray-100">
                                <tr>
                                  {Object.keys(finding.data_preview[0] || {}).map(key => (
                                    <th key={key} className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                      {key}
                                    </th>
                                  ))}
                                </tr>
                              </thead>
                              <tbody className="bg-white divide-y divide-gray-200">
                                {finding.data_preview.slice(0, 5).map((row, rowIndex) => (
                                  <tr key={rowIndex}>
                                    {Object.values(row).map((value, colIndex) => (
                                      <td key={colIndex} className="px-4 py-2 whitespace-nowrap text-sm text-gray-700">
                                        {String(value) || 'N/A'}
                                      </td>
                                    ))}
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}

          {selectedTab === 'actions' && (
            <div className="space-y-6">
              {/* All Action Items */}
              {allActionItems.length > 0 && (
                <div className="bg-white rounded-lg shadow-sm p-6">
                  <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="mr-2">üéØ</span>
                    –í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                  </h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {allActionItems.map((action, index) => (
                      <div key={index} className="bg-blue-50 border-l-4 border-blue-400 p-4">
                        <p className="text-blue-800 text-sm">{action}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* All Opportunities */}
              {allOpportunities.length > 0 && (
                <div className="bg-white rounded-lg shadow-sm p-6">
                  <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="mr-2">üöÄ</span>
                    –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞
                  </h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {allOpportunities.map((opportunity, index) => (
                      <div key={index} className="bg-green-50 border-l-4 border-green-400 p-4">
                        <p className="text-green-800 text-sm">{opportunity}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}

          {selectedTab === 'technical' && (
            <div className="space-y-6">
              {/* Tables Info */}
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                  <span className="mr-2">üóÇÔ∏è</span>
                  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
                </h2>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–¢–∞–±–ª–∏—Ü–∞</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°—Ç—Ä–æ–∫</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ö–æ–ª–æ–Ω–æ–∫</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ü–∞–º—è—Ç—å (MB)</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°—Ç–∞—Ç—É—Å</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {Object.entries(report.results?.tables_info || {}).map(([tableName, info]: [string, any]) => (
                        <tr key={tableName}>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{tableName}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{info.rows?.toLocaleString()}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{info.columns}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{info.memory_mb?.toFixed(2)}</td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                              –ó–∞–≥—Ä—É–∂–µ–Ω–æ
                            </span>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>

              {/* Relations Info */}
              {report.results?.relations_info && report.results?.relations_info.length > 0 && (
                <div className="bg-white rounded-lg shadow-sm p-6">
                  <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="mr-2">üîó</span>
                    –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
                  </h2>
                  <div className="space-y-3">
                    {report.results?.relations_info.map((relation: any, index: number) => (
                      <div key={index} className="bg-gray-50 rounded-lg p-4">
                        <p className="text-sm text-gray-700">
                          <span className="font-medium">{relation.from_table}</span>
                          <span className="text-gray-500 mx-2">‚Üí</span>
                          <span className="font-medium">{relation.to_table}</span>
                        </p>
                        <p className="text-xs text-gray-500 mt-1">
                          {relation.from_column} ‚Üí {relation.to_column} ({relation.type})
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ReportPage;
