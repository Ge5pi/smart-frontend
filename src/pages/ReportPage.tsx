import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getReport, type EnhancedReport } from '../api';

// --- –¢–∏–ø—ã ---
// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
interface CorrelationData {
  with_column: string;
  coefficient: number;
}

// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∫–æ–≥–¥–∞ –Ω–µ—Ç –æ—à–∏–±–∫–∏
interface SuccessReportResults {
    insights: Record<string, string>;
    correlations: Record<string, Record<string, CorrelationData>>;
}

// --- –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ ---
/**
 * –•—É–∫ –¥–ª—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –µ–≥–æ ID.
 * @param reportId - ID –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
 */
const useReport = (reportId: string | undefined) => {
  const [report, setReport] = useState<EnhancedReport | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchReport = async () => {
      if (!reportId) {
        setError('–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        setLoading(false);
        return;
      }

      setLoading(true);
      setError(null);

      try {
        const response = await getReport(reportId);
        setReport(response.data);
      } catch (err: any) {
        setError(err.response?.data?.detail || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞.');
      } finally {
        setLoading(false);
      }
    };

    fetchReport();
  }, [reportId]);

  return { report, loading, error };
};


// --- UI –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ---
/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏, –æ—à–∏–±–æ–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
 */
const Alert: React.FC<{ message: string; type: 'error' | 'info' }> = ({ message, type }) => {
  const baseClasses = 'p-4 rounded-lg border';
  const typeClasses = {
    error: 'bg-red-50 border-red-200 text-red-800',
    info: 'bg-blue-50 border-blue-200 text-blue-800',
  };

  return (
    <div className={`${baseClasses} ${typeClasses[type]}`} role="alert">
      <p className="font-semibold">{type === 'error' ? '–û—à–∏–±–∫–∞ Houston, we have a problem!' : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}</p>
      <p>{message}</p>
    </div>
  );
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏–Ω–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏.
 */
const LoadingSpinner: React.FC = () => (
  <div className="flex justify-center items-center py-16">
    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
    <span className="ml-4 text-lg text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞...</span>
  </div>
);

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏.
 */
const CorrelationTable: React.FC<{ correlations: Record<string, CorrelationData> }> = ({ correlations }) => {
  if (!correlations || Object.keys(correlations).length === 0) {
    return <p className="text-sm text-gray-500 italic mt-2">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏.</p>;
  }

  return (
    <div className="overflow-x-auto mt-4">
      <table className="min-w-full bg-white border border-gray-200 rounded-md">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°—Ç–æ–ª–±–µ—Ü</th>
            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ö–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å</th>
            <th className="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</th>
          </tr>
        </thead>
        <tbody className="divide-y divide-gray-200">
          {Object.entries(correlations).map(([column, data]) => (
            <tr key={column} className="hover:bg-gray-50 transition-colors duration-150">
              <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">{column}</td>
              <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-600">{data.with_column}</td>
              <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-600 text-right font-mono">{data.coefficient.toFixed(4)}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
 */
const DatabaseInsightsView: React.FC<{ results: SuccessReportResults }> = ({ results }) => {
    if (!results.insights) {
        return <Alert message="–í –æ—Ç—á–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞." type="info" />;
    }
    return (
        <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö üìà</h2>
            <div className="space-y-6">
                {Object.entries(results.insights).map(([table, insight]) => (
                    <div key={table} className="bg-white p-6 rounded-lg shadow-md border border-gray-100 transition-shadow hover:shadow-lg">
                        <h3 className="text-xl font-semibold text-gray-800 mb-2">
                            –¢–∞–±–ª–∏—Ü–∞: <span className="font-mono bg-gray-100 px-2 py-1 rounded text-blue-600">{table}</span>
                        </h3>
                        <p className="text-gray-700 mb-4">{insight}</p>
                        <CorrelationTable correlations={results.correlations?.[table] || {}} />
                    </div>
                ))}
            </div>
        </section>
    );
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —à–∞–ø–∫–∏ –æ—Ç—á–µ—Ç–∞.
 */
const ReportHeader: React.FC<{ report: EnhancedReport }> = ({ report }) => (
    <header className="mb-8 pb-4 border-b border-gray-200">
        <h1 className="text-4xl font-bold text-gray-900">–û—Ç—á–µ—Ç #{report.id}</h1>
        <div className="flex items-center space-x-6 mt-2 text-base text-gray-500">
            <span>–°—Ç–∞—Ç—É—Å: <span className="font-semibold text-gray-800 capitalize">{report.status}</span></span>
            <span>–°–æ–∑–¥–∞–Ω: <span className="font-semibold text-gray-800">{new Date(report.created_at).toLocaleString('ru-RU')}</span></span>
        </div>
    </header>
);


// --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---

const ReportPage: React.FC = () => {
  const { reportId } = useParams<{ reportId: string }>();
  const { report, loading, error } = useReport(reportId);

  const renderContent = () => {
    if (loading) {
      return <LoadingSpinner />;
    }

    if (error) {
      return <Alert message={error} type="error" />;
    }

    if (!report || !report.results) {
      return <Alert message="–û—Ç—á–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è." type="info" />;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç—á–µ—Ç–µ –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä—É—é –≤–µ—Ä–Ω—É–ª –±—ç–∫–µ–Ω–¥
    if ('error' in report.results) {
        const reportError = report.results.error;
        const errorDetails = report.results.details ? ` –î–µ—Ç–∞–ª–∏: ${report.results.details}` : '';
        return (
            <>
                <ReportHeader report={report} />
                <Alert message={`${reportError}${errorDetails}`} type="error" />
            </>
        );
    }

    return (
      <>
        <ReportHeader report={report} />
        <main>
          <DatabaseInsightsView results={report.results as SuccessReportResults} />
        </main>
      </>
    );
  };

  return (
    <div className="container mx-auto p-6 md:p-8 bg-gray-50 min-h-screen">
      {renderContent()}
    </div>
  );
};

export default ReportPage;