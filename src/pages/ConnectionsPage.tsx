import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../api';
interface DatabaseConnection {
  id: number;
  nickname: string;
  db_type: string;
  created_at: string;
}

interface AnalysisTask {
  task_id: string;
  status: 'PENDING' | 'PROGRESS' | 'SUCCESS' | 'FAILURE';
  progress?: string;
  progress_percentage?: number;
  error?: string;
}

const ConnectionsPage: React.FC = () => {
  const navigate = useNavigate();
  const [connections, setConnections] = useState<DatabaseConnection[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTasks, setActiveTasks] = useState<Record<number, AnalysisTask>>({});

  useEffect(() => {
    fetchConnections();
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–¥–∞—á
    const interval = setInterval(checkTaskStatus, 2000);
    return () => clearInterval(interval);
  }, []);

  const fetchConnections = async () => {
    try {
      const response = await fetch('/api/database-connections', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      }

      const data = await response.json();
      setConnections(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  const checkTaskStatus = async () => {
    for (const [connectionId, task] of Object.entries(activeTasks)) {
      if (task.status === 'PENDING' || task.status === 'PROGRESS') {
        try {
          const response = await fetch(`/api/reports/task/${task.task_id}/status`, {
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
          });

          if (response.ok) {
            const taskStatus = await response.json();
            setActiveTasks(prev => ({
              ...prev,
              [connectionId]: taskStatus
            }));

            // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Ç—á–µ—Ç
            if (taskStatus.status === 'SUCCESS' && taskStatus.report_id) {
              // –£–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
              setTimeout(() => {
                setActiveTasks(prev => {
                  const newTasks = { ...prev };
                  delete newTasks[connectionId];
                  return newTasks;
                });
                navigate(`/reports/${taskStatus.report_id}`);
              }, 1000);
            }

            // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
            if (taskStatus.status === 'FAILURE') {
              setTimeout(() => {
                setActiveTasks(prev => {
                  const newTasks = { ...prev };
                  delete newTasks[connectionId];
                  return newTasks;
                });
              }, 5000);
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error);
        }
      }
    }
  };

  const startAnalysis = async (connectionId: number, analysisType: 'quick' | 'standard' | 'comprehensive') => {
    try {
      const endpoints = {
        quick: '/api/analytics/quick-smart-analysis',
        standard: '/api/analytics/smart-analysis',
        comprehensive: '/api/analytics/comprehensive-smart-analysis'
      };

      const response = await fetch(endpoints[analysisType], {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ connection_id: connectionId })
      });

      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑');
      }

      const data = await response.json();

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
      setActiveTasks(prev => ({
        ...prev,
        [connectionId]: {
          task_id: data.task_id,
          status: 'PENDING',
          progress: '–ó–∞–ø—É—Å–∫ SmartGPT –∞–Ω–∞–ª–∏–∑–∞...'
        }
      }));

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  };

  const getAnalysisTypeLabel = (type: 'quick' | 'standard' | 'comprehensive') => {
    switch (type) {
      case 'quick':
        return {
          label: '–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑',
          description: '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å SmartGPT',
          icon: '‚ö°',
          time: '~5-10 –º–∏–Ω',
          questions: '8 —É–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤'
        };
      case 'standard':
        return {
          label: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
          description: '–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–º–∏ GPT —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏',
          icon: 'üéØ',
          time: '~15-20 –º–∏–Ω',
          questions: '15 —É–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤'
        };
      case 'comprehensive':
        return {
          label: '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
          description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≥–ª—É–±–æ–∫–∏–π SmartGPT –∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π',
          icon: 'üöÄ',
          time: '~30-45 –º–∏–Ω',
          questions: '25 —É–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤'
        };
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-6xl mx-auto">
          <div className="animate-pulse">
            <div className="h-8 bg-gray-200 rounded w-1/3 mb-6"></div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[...Array(3)].map((_, i) => (
                <div key={i} className="bg-white rounded-lg shadow-sm p-6">
                  <div className="h-6 bg-gray-200 rounded w-3/4 mb-4"></div>
                  <div className="h-4 bg-gray-200 rounded w-1/2 mb-4"></div>
                  <div className="space-y-2">
                    <div className="h-10 bg-gray-200 rounded"></div>
                    <div className="h-10 bg-gray-200 rounded"></div>
                    <div className="h-10 bg-gray-200 rounded"></div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">SmartGPT Analytics</h1>
          <p className="text-gray-600">
            –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –≥–ª—É–±–æ–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã —Å –ø–æ–º–æ—â—å—é —É–º–Ω–æ–≥–æ GPT-–∞–Ω–∞–ª–∏–∑–∞.
          </p>
        </div>

        {/* New SmartGPT Banner */}
        <div className="bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg p-6 mb-8 text-white">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold mb-2 flex items-center">
                <span className="mr-2">ü§ñ</span>
                –ù–æ–≤—ã–π SmartGPT –ê–Ω–∞–ª–∏–∑
              </h2>
              <p className="text-blue-100">
                –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.
                –ü–æ–ª—É—á–∞–π—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –∏ —É–º–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
              </p>
            </div>
            <div className="text-6xl opacity-20">üß†</div>
          </div>
          <div className="mt-4 grid grid-cols-3 gap-4 text-sm">
            <div className="flex items-center">
              <span className="mr-2">‚ú®</span>
              –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            </div>
            <div className="flex items-center">
              <span className="mr-2">üéØ</span>
              –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            </div>
            <div className="flex items-center">
              <span className="mr-2">üîÆ</span>
              –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            </div>
          </div>
        </div>

        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
            <p className="text-red-600">{error}</p>
          </div>
        )}

        {/* Connections Grid */}
        {connections.length === 0 ? (
          <div className="text-center py-12 bg-white rounded-lg shadow-sm">
            <div className="text-6xl mb-4">üóÑÔ∏è</div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π</h3>
            <p className="text-gray-600 mb-6">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã—à–µ.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {connections.map((conn) => {
              const activeTask = activeTasks[conn.id];
              const isAnalyzing = activeTask && (activeTask.status === 'PENDING' || activeTask.status === 'PROGRESS');

              return (
                <div key={conn.id} className="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow">
                  <div className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900 mb-1">{conn.nickname}</h3>
                        <div className="flex items-center text-sm text-gray-500">
                          <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs font-medium mr-2">
                            {conn.db_type}
                          </span>
                          <span>–°–æ–∑–¥–∞–Ω–æ: {new Date(conn.created_at).toLocaleDateString('ru-RU')}</span>
                        </div>
                      </div>
                    </div>

                    {/* Analysis Progress */}
                    {isAnalyzing && activeTask && (
                      <div className="mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-sm font-medium text-blue-900">SmartGPT –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...</span>
                          {activeTask.progress_percentage && (
                            <span className="text-sm text-blue-700">{activeTask.progress_percentage}%</span>
                          )}
                        </div>
                        {activeTask.progress_percentage && (
                          <div className="w-full bg-blue-200 rounded-full h-2 mb-2">
                            <div
                              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                              style={{ width: `${activeTask.progress_percentage}%` }}
                            ></div>
                          </div>
                        )}
                        <p className="text-xs text-blue-800">{activeTask.progress || '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...'}</p>
                      </div>
                    )}

                    {/* Analysis Error */}
                    {activeTask && activeTask.status === 'FAILURE' && (
                      <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
                        <h4 className="text-sm font-medium text-red-900 mb-1">–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</h4>
                        <p className="text-xs text-red-700">{activeTask.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>
                      </div>
                    )}

                    {/* Analysis Buttons */}
                    <div className="space-y-3">
                      {(['quick', 'standard', 'comprehensive'] as const).map((analysisType) => {
                        const config = getAnalysisTypeLabel(analysisType);
                        const isDisabled = isAnalyzing;

                        return (
                          <button
                            key={analysisType}
                            onClick={() => !isDisabled && startAnalysis(conn.id, analysisType)}
                            disabled={isDisabled}
                            className={`w-full text-left p-4 rounded-lg border-2 transition-all ${
                              isDisabled
                                ? 'border-gray-200 bg-gray-50 cursor-not-allowed'
                                : analysisType === 'quick'
                                ? 'border-green-200 bg-green-50 hover:border-green-300 hover:bg-green-100'
                                : analysisType === 'standard'
                                ? 'border-blue-200 bg-blue-50 hover:border-blue-300 hover:bg-blue-100'
                                : 'border-purple-200 bg-purple-50 hover:border-purple-300 hover:bg-purple-100'
                            }`}
                          >
                            <div className="flex items-center justify-between">
                              <div className="flex items-center">
                                <span className="text-2xl mr-3">{config.icon}</span>
                                <div>
                                  <div className="font-semibold text-gray-900 flex items-center">
                                    {config.label}
